#include <Solution.h>
#include <iostream>

int find(vector<int>& root, int idx) {
	if (root[idx] == idx) return idx;
	return root[idx] = find(root, root[idx]);
}

int Solution::minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
	int n = graph.size();

	vector<int> infectCnt(n, 0);
	for (const auto& v : initial) ++infectCnt[v];
	vector<int> groupCnt(n, 1);

	vector<int> root;
	for (int i = 0 ; i < n ; ++i) root.emplace_back(i);
	for (int i = 0 ; i < n ; ++i) {
		for (int j = i + 1 ; j < n ; ++j) {
			if (graph[i][j] == 0) continue;
			int lr = find(root, i);
			int rr = find(root, j);
			if (lr == rr) continue;
			int idx = min(lr, rr);
			int rIdx = max(lr, rr);
			root[lr] = root[rr] = idx;
			infectCnt[idx] += infectCnt[rIdx];
			groupCnt[idx] += groupCnt[rIdx];
		}
	}

	int maxReduce = 0;
	int result = n;
	for (const auto& v : initial) {
		int idx = find(root, v);
		int reduce = infectCnt[idx] == 1 ? groupCnt[idx] : 0;

		if (maxReduce < reduce) {
			maxReduce = reduce;
			result = v;
		} else if (maxReduce == reduce) {
			result = min(result, v);
		}
	}
	return result == n ? 0 : result;
}
